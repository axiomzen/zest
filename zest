#!/bin/bash

# Log an error message
_error() {
	printf "\e[31;1m====> $@\e[0m\n"
}

# Log a fatal message and exit
_fatal() {
	printf "\e[31;1m====> $@\e[0m\n"
	exit 1
}

# Informational message
_info() {
	printf "\e[32;1m====> $@\e[0m\n"
}

# Verbose debugging message
_debug() {
	if $DEBUG; then
		printf "\e[33;1m====> $@\e[0m\n"
	fi
}

# find the _zester script
_zest_get_zester() {

	# right beside where we live
	DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
	if [[ -x $DIR/_zester ]]; then
		ZESTER_PATH=$DIR/_zester
		return 0
	fi

	# try look for _zester in the pwd
	if [[ -x $(pwd)/_zester ]]; then
		ZESTER_PATH=$(pwd)/_zester
		return 0
	fi

	# Directory up
	if [[ -x $(pwd)/../_zester ]]; then
		ZESTER_PATH=$(pwd)/../_zester
		return 0
	fi

	# Directory forward
	if [[ -x $(pwd)/zest/_zester ]]; then
		ZESTER_PATH=$(pwd)/zest/_zester
		return 0
	fi

	# Home directory
	if [[ -x $HOME/.zest/_zester ]]; then
		ZESTER_PATH=$HOME/.zest/_zester
		return 0
	fi

	# then look for it in the $PATH
	if which _zester > /dev/null; then
		ZESTER_PATH=$(which _zester)
		return 0
	fi

	# try again but with ABSOLUTE_DIR
	if [[ -x ${ABSOLUTE_DIR}/_zester ]]; then
		ZESTER_PATH=${ABSOLUTE_DIR}/_zester
		return 0
	fi

	# couldn't find it
	return 1
}

# Check we are a service
_zest_is_service() {

	# Components must have a Zestfile and a Dockerfile
	if [[ ! -r $1/Zestfile ]]; then
		return 1
	fi

	# load the Zestfile
	_debug "Loading Zestfile at ${1}/Zestfile"
	source $1/Zestfile

	# check for docker file override
	if [[ ! "$DOCKER_FILE" == "" ]]; then
		DOCKERFILE=$DOCKER_FILE
		_debug "DOCKER_FILE set, using $DOCKERFILE"
	else
		DOCKERFILE=Dockerfile
		_debug "DOCKER_FILE not set, using $DOCKERFILE"
	fi

	if [[ ! -r $1/$DOCKERFILE ]]; then
		return 1
	fi

	return 0
}

# Check we are a project
_zest_is_project() {

	# Projects must have a Peelfile
	if [[ ! -r $1/Peelfile ]]; then
		return 1
	fi

	# Check to see what compose file we should use
	COMPOSE_FILE=`grep -E -i "^compose: " Peelfile | awk '{print $2}'`

	# If its blank, use default
	if [[ "$COMPOSE_FILE" == "" ]]; then
		COMPOSE_FILE=$1/docker-compose.yml
	else
		COMPOSE_FILE=$1/$COMPOSE_FILE
	fi

	# Projects must have a docker-compose file of somesort
	if [[ ! -r $COMPOSE_FILE ]]; then
		return 1
	fi

	_debug "Using docker-compose file at $COMPOSE_FILE"

	# Check to see what integration compose file we should use
	COMPOSE_INTEGRATE_FILE=`grep -E -i "^compose-integrate: " Peelfile | awk '{print $2}'`

	# If its blank, use default
	if [[ "$COMPOSE_INTEGRATE_FILE" == "" ]]; then
		COMPOSE_INTEGRATE_FILE=$1/docker-compose.integrate.yml
	else
		COMPOSE_INTEGRATE_FILE=$1/$COMPOSE_INTEGRATE_FILE
	fi

	# Projects must have a docker-compose integration file of some sort
	if [[ ! -r $COMPOSE_INTEGRATE_FILE ]]; then
		return 1
	fi

	_debug "Using docker-compose integration file at $COMPOSE_INTEGRATE_FILE"

	return 0
}

_zest_run() {

	# Check project
	_debug "checking project"
	if ! _zest_is_project . ; then
		_fatal "Not a zest project"
	fi

    RUN_SERVICE="${SERVICE_ARG:-`grep -E -i "^run: " Peelfile | awk '{print $2}'`}"

	if [[ "$RUN_SERVICE" == "" ]]; then
		_fatal "run: not specified in Peelfile nor in --service"
    fi

	_info "Running service $RUN_SERVICE"

	docker-compose -f $COMPOSE_FILE up -d $RUN_SERVICE
}

_zest_stop() {

	# Check project
	_debug "checking project"
	if ! _zest_is_project . ; then
		_fatal "Not a zest project"
	fi

	_info "Stopping project"

	docker-compose -f $COMPOSE_FILE $DOCKER_VERBOSE down --rmi local
}

_zest_cache_volumes() {
	# Check for cache directories

	local cache_mounts=()

	# handle legacy variables
	if [[ ! -z $CACHE_DIR_SRC && ! -z $CACHE_DIR_DST ]]; then
		 #_debug "Including cache directory $CACHE_DIR_SRC => $CACHE_DIR_DST"
		cache_mounts+=("$CACHE_DIR_SRC:$CACHE_DIR_DST")
	fi

	# handle new array variables
	if [[ ! -z $CACHE_DIR_SRCS && ! -z $CACHE_DIR_DSTS ]]; then
		cache_dir_count=${#CACHE_DIR_SRCS[@]}
		for ((i=0; i < $cache_dir_count; i++)); do
			src=${CACHE_DIR_SRCS[$i]} dst=${CACHE_DIR_DSTS[$i]}
			# _debug "Including cache directory $src => $dst"
			cache_mounts+=("$src:$dst")
		done
	fi

	local cache_volumes=
	if [[ "${#cache_mounts[@]}" -gt 0 ]]; then
		cache_volumes=$(printf -- "-v %s " "${cache_mounts[@]}")
	fi

	echo "$cache_volumes"
}

_zest_build() {

    SERVICE="${SERVICE_ARG:-$(basename `pwd`)}"

	# First ensure we're a service
	_debug "Checking service ${SERVICE}"

    SERVICE_PATH=$(find $(pwd) -type d -maxdepth 2 | grep ${SERVICE} | head -n 1)

    if [[ "$SERVICE_PATH" == "" ]]; then
	    _debug "Service path is empty, setting to current path"
        SERVICE_PATH=$(pwd)
    fi

    _debug "service_path: ${SERVICE_PATH}"

	if ! _zest_is_service $SERVICE_PATH ; then
		_fatal "$SERVICE is not a service"
	fi

	# Must have $BUILD_CONTAINER set
	if [[ "$BUILD_CONTAINER" == "" ]]; then
		_fatal "BUILD_CONTAINER not set in Zestfile"
	fi

	# Get the zester script
	if ! _zest_get_zester; then
		_fatal "Could not find zester"
	fi
	_debug "Found _zester at $ZESTER_PATH"

	# check for service override
	if [[ ! "$SERVICE_NAME" == "" ]]; then
		_debug "SERVICE_NAME set, using $SERVICE_NAME"
	else
		SERVICE_NAME=$SERVICE
		_debug "SERVICE_NAME not set, using $SERVICE"
	fi

	# Do PreBuild
	_info "Running PreBuild"
	PreBuild

	if [[ $? -ne 0 ]]; then
		_fatal "PreBuild failed"
	fi

	# Build in the container
	_info "Building service $SERVICE_NAME in $BUILD_CONTAINER"

	docker run --rm -v $SERVICE_PATH:$MOUNT_DIR/$SERVICE -w $MOUNT_DIR/$SERVICE -v $ZESTER_PATH:/usr/bin/zester:ro $(_zest_cache_volumes) $BUILD_CONTAINER zester build --name $SERVICE_NAME

	if [[ $? -ne 0 ]]; then
		_fatal "Build failed"
	fi

	# Do PostBuild
	_info "Running PostBuild"
	PostBuild

	if [[ $? -ne 0 ]]; then
		_fatal "PostBuild failed"
	fi

	_info "Build success!"
}

_zest_create() {

    SERVICE="${SERVICE_ARG:-$(basename `pwd`)}"

	# First ensure we're a service
	_debug "Checking service ${SERVICE}"

    SERVICE_PATH=$(find $(pwd) -type d -maxdepth 2 | grep ${SERVICE} | head -n 1)

    if [[ "$SERVICE_PATH" == "" ]]; then
	    _debug "Service path is empty, setting to current path"
        SERVICE_PATH=$(pwd)
    fi

    _debug "service_path: ${SERVICE_PATH}"

	if ! _zest_is_service $SERVICE_PATH ; then
		_fatal "$SERVICE is not a service"
	fi

	bash -c "$ABSOLUTE_PATH build -s $SERVICE_PATH $GO_VERBOSE && $ABSOLUTE_PATH test -s $SERVICE_PATH $GO_VERBOSE && $ABSOLUTE_PATH bundle -s $SERVICE_PATH $GO_VERBOSE" || _fatal "Zest build failed"

	_info "Create success!"
}

_zest_bundle() {

    SERVICE="${SERVICE_ARG:-$(basename `pwd`)}"

	# First ensure we're a service
	_debug "Checking service ${SERVICE}"

    SERVICE_PATH=$(find $(pwd) -type d -maxdepth 2 | grep ${SERVICE} | head -n 1)

    if [[ "$SERVICE_PATH" == "" ]]; then
	    _debug "Service path is empty, setting to current path"
        SERVICE_PATH=$(pwd)
    fi

    _debug "service_path: ${SERVICE_PATH}"

	if ! _zest_is_service $SERVICE_PATH ; then
		_fatal "$SERVICE is not a service"
	fi

	# Get the version tag override
	VERSION_OVERRIDE=$(Version)
	if [[ ! "$VERSION_OVERRIDE" == "" ]]; then
		VERSION=$VERSION_OVERRIDE
	fi

	# Check some version is set
	if [[ "$VERSION" == "" ]]; then
		_error "Version not set"
		_error "Using 'latest'"
		VERSION=latest
	fi

	# Get the revision
	REVISION_OVERRIDE=$(Revision)
	if [[ "$REVISION_OVERRIDE" == "" ]]; then
		_error "Revision not set"
		_error "Using 'unversioned'"
		REVISION_OVERRIDE=unversioned
	fi

	# Get the project name
	if [[ "$REPO" == "" ]]; then
		REPO=$(cd ..; basename $PWD)
		_debug "REPO not set, using $REPO"
	fi

	# check for service override
	if [[ ! "$SERVICE_NAME" == "" ]]; then
		SERVICE=$SERVICE_NAME
		_debug "SERVICE_NAME set, using $SERVICE"
	else
		_debug "SERVICE_NAME not set, using $SERVICE"
	fi

	# Do PreBundle
	_info "Running PreBundle"
	PreBundle

	if [[ $? -ne 0 ]]; then
		_fatal "PreBundle failed"
	fi

	# Build the image
	_info "Bundling image $REPO/$SERVICE:$VERSION"

	if [[ "$IMAGE_SERVER" == "" ]]; then
		_debug "Not using image server"
        _debug "-f $DOCKERFILE $SERVICE_PATH"
		docker build $BUILD_ARGS --build-arg REVISION=$REVISION_OVERRIDE -t $REPO/$SERVICE:$VERSION -t $REPO/$SERVICE:latest -f $SERVICE_PATH/$DOCKERFILE $SERVICE_PATH
	else
		_debug "Using image server $IMAGE_SERVER"
		docker build $BUILD_ARGS --build-arg REVISION=$REVISION_OVERRIDE -t $IMAGE_SERVER/$REPO/$SERVICE:$VERSION -t $IMAGE_SERVER/$REPO/$SERVICE:latest -f $SERVICE_PATH/$DOCKERFILE $SERVICE_PATH

	fi

	if [[ $? -ne 0 ]]; then
		_fatal "Bundle failed"
	fi

	# Do PostBundle
	_info "Running PostBundle"
	PostBundle

	if [[ $? -ne 0 ]]; then
		_fatal "PostBundle failed"
	fi

	_info "Bundle success!"
}

_zest_push() {

	# Get the service name (folder name)
	SERVICE=$(basename `pwd`)

	# First ensure we're a service
	_debug "Checking service"
	if ! _zest_is_service . ; then
		_fatal "$SERVICE is not a service"
	fi

	# Get the version tag override
	VERSION_OVERRIDE=$(Version)
	if [[ ! "$VERSION_OVERRIDE" == "" ]]; then
		VERSION=$VERSION_OVERRIDE
	fi

	# Check some version is set
	if [[ "$VERSION" == "" ]]; then
		_error "Version not set"
		_error "Using 'latest'"
		VERSION=latest
	fi

	# Get the project name
	if [[ "$REPO" == "" ]]; then
		REPO=$(cd ..; basename $PWD)
		_debug "REPO not set, using $REPO"
	fi

	# check for service override
	if [[ ! "$SERVICE_NAME" == "" ]]; then
		SERVICE=$SERVICE_NAME
		_debug "SERVICE_NAME set, using $SERVICE"
	else
		_debug "SERVICE_NAME not set, using $SERVICE"
	fi

	# Push the image
	_info "Pushing image $REPO/$SERVICE:$VERSION"

	if [[ "$IMAGE_SERVER" == "" ]]; then
		_debug "Not using image server"
		docker push $REPO/$SERVICE:$VERSION
		docker push $REPO/$SERVICE:latest
	else
		_debug "Using image server $IMAGE_SERVER"
		docker push $IMAGE_SERVER/$REPO/$SERVICE:$VERSION
		docker push $IMAGE_SERVER/$REPO/$SERVICE:latest
	fi

	if [[ $? -ne 0 ]]; then
		_fatal "Push failed"
	fi

	_info "Push success!"
}


_zest_test() {

    SERVICE="${SERVICE_ARG:-$(basename `pwd`)}"

	# First ensure we're a service
	_debug "Checking service ${SERVICE}"

    SERVICE_PATH=$(find $(pwd) -type d -maxdepth 2 | grep ${SERVICE} | head -n 1)

    if [[ "$SERVICE_PATH" == "" ]]; then
	    _debug "Service path is empty, setting to current path"
        SERVICE_PATH=$(pwd)
    fi

    _debug "service_path: ${SERVICE_PATH}"

	if ! _zest_is_service $SERVICE_PATH ; then
		_fatal "$SERVICE is not a service"
	fi


	# Must have $TEST_CONTAINER or $BUILD_CONTAINER set
	if [[ "$TEST_CONTAINER" == "" ]]; then
		TEST_CONTAINER=$BUILD_CONTAINER
	fi
	if [[ "$TEST_CONTAINER" == "" ]]; then
		_fatal "Neither TEST_CONTAINER nor BUILD_CONTAINER set in Zestfile"
	fi

	# Get the zester script
	if ! _zest_get_zester; then
		_fatal "Could not find zester"
	fi
	_debug "Found _zester at $ZESTER_PATH"

	# check for service override
	if [[ ! "$SERVICE_NAME" == "" ]]; then
		_debug "SERVICE_NAME set, using $SERVICE_NAME"
	else
		SERVICE_NAME=$SERVICE
		_debug "SERVICE_NAME not set, using $SERVICE"
	fi

	# Build in the container
	_info "Testing service $SERVICE in $TEST_CONTAINER"
	docker run --rm -v $SERVICE_PATH:$MOUNT_DIR/$SERVICE -w $MOUNT_DIR/$SERVICE -v $ZESTER_PATH:/usr/bin/zester:ro $(_zest_cache_volumes) $TEST_CONTAINER zester test --name $SERVICE_NAME

	if [[ $? -ne 0 ]]; then
		_fatal "Test failed"
	fi

	_info "Test success!"
}

_zest_version() {

	# Get the service name (folder name)
	SERVICE=$(basename `pwd`)
	_debug "Current directory is $SERVICE"

	# First ensure we're a service
	_debug "Checking service"
	if ! _zest_is_service . ; then
		_fatal "$SERVICE is not a service"
	fi

	# Get the version tag override
	VERSION_OVERRIDE=$(Version)
	if [[ ! "$VERSION_OVERRIDE" == "" ]]; then
		VERSION=$VERSION_OVERRIDE
	fi

	if [[ "$VERSION" == "" && $DEFAULT_VERSION == true ]]; then
		_debug "using default version"
		VERSION=0.0.0-unversioned
	fi

	echo "$VERSION"
}

_zest_init_service() {

	if [[ ! -f Zestfile ]]; then
		_info "Adding default Zestfile"
		cp /usr/local/share/zest/Zestfile.example Zestfile
	fi

	if [[ ! -f Dockerfile ]]; then
		_info "Creating empty Dockerfile"
		touch Dockerfile
	fi

	_info "$(basename $PWD) is now a service"

}

_zest_init_project() {

	if [[ ! -f docker-compose.yml ]]; then
		_info "Adding docker-compose"
		echo 'version: "2"' >> docker-compose.yml
		echo 'services:' >> docker-compose.yml

		#TODO search for each service?
	fi

	if [[ ! -f Peelfile ]]; then
		_info "Adding Peelfile"
		touch Peelfile
	fi
}

_zest_enter() {

	# Get the service name (folder name)
	SERVICE=$(basename `pwd`)

	# First ensure we're a service
	_debug "Checking service"
	if ! _zest_is_service . ; then
		_fatal "$SERVICE is not a service"
	fi

	if [[ "$BUILD_CONTAINER" == "" ]]; then
		_fatal "BUILD_CONTAINER not set"
	fi

	# check for service override
	if [[ ! "$SERVICE_NAME" == "" ]]; then
		_debug "SERVICE_NAME set, using $SERVICE_NAME"
	else
		SERVICE_NAME=$SERVICE
		_debug "SERVICE_NAME not set, using $SERVICE"
	fi

	_info "Entering $BUILD_CONTAINER for development"
	docker run -v $(pwd):/$SERVICE -w /$SERVICE -ti $BUILD_CONTAINER bash -i

	_info "Leaving dev container"
}

_zest_integrate() {

	# Make sure we're a project
	if ! _zest_is_project . ; then
		_fatal "Not a zest project."
	fi

	# Get the integrate project
	_debug "Getting integrate service from Peelfile"
	INTEGRATE_SERVICE=`grep -E -i "^integrate: " Peelfile | awk '{print $2}'`
	# if this was written in go, we could load/check the compose file as well
	PROJECT_NAME=`grep -E -i "^project: " Peelfile | awk '{print $2}'`

	if [[ "$INTEGRATE_SERVICE" == "" ]]; then
		_fatal "integrate not specified in Peelfile"
	fi

	if [[ "$PROJECT_NAME" == "" ]]; then
		_info "Project Name not found in Peelfile, going to use pwd"
		PROJECT_NAME=${PWD##*/}
		PROJECT_NAME=${PROJECT_NAME//-/}
		_info "Using ${PROJECT_NAME} for project name"
	fi

	# Run compose
	DOCKER_COMPOSE_UP_OPTIONS="--abort-on-container-exit --exit-code-from $INTEGRATE_SERVICE $INTEGRATE_SERVICE"

	if [[ -r $COMPOSE_INTEGRATE_FILE ]]; then
		_debug "running compose with integrate overrides"
		docker-compose -f $COMPOSE_FILE -f $COMPOSE_INTEGRATE_FILE up $DOCKER_COMPOSE_UP_OPTIONS
	else
		_debug "running compose"
		docker-compose -f $COMPOSE_FILE up $DOCKER_COMPOSE_UP_OPTIONS
	fi

	# Integrate finished
	# Capture return value
	# docker compose always returns 0, so we have to inspect what happened

	# we know integrator name, as that is in the peel file
	# we can either cheat ($pwd -> remove -) or add something to the peelfile
	# <project name>_<service name>_1

	# Inspect containers to see if they exited
	INTEGRATE_EXIT_CODE=$?

	_debug "Compose exited with status $INTEGRATE_EXIT_CODE"

	# Clean up
	# Lets clean up only if the tests passed
	# otherwise, we probably want to look at the logs of the containers involved

	if [[ $INTEGRATE_EXIT_CODE -eq 0 ]]; then
		_info "Integration tests passed, cleaning up"
		_zest_integrate_down
	else
		_error "Integration tests failed"
		exit $INTEGRATE_EXIT_CODE
	fi
}

_zest_integrate_down() {
        _debug "Checking project"
        if ! _zest_is_project . ; then
                _fatal "This directory is not a zest project"
        fi

	_debug "Cleaning up"
	if [[ -r $COMPOSE_INTEGRATE_FILE ]]; then
		_debug "running compose down with integrate overrides"
		docker-compose -f $COMPOSE_FILE -f $COMPOSE_INTEGRATE_FILE $DOCKER_VERBOSE down
	else
		_debug "running compose down"
		docker-compose -f $COMPOSE_FILE $DOCKER_VERBOSE down --rmi local
	fi
}

_zest_all() {

	_debug "Checking project"
	if ! _zest_is_project . ; then
		_fatal "This directory is not a project"
	fi

	_info "Running zest on all possible sub services"

	# Look for services in root folder and folders down
	for dir in `find . -type d -maxdepth 2`; do
		_debug "Checking $dir"
		if _zest_is_service $dir; then
			_info "Zesting $dir"
			bash -c "$ABSOLUTE_PATH build -s $dir $GO_VERBOSE && $ABSOLUTE_PATH test -s $dir $GO_VERBOSE && $ABSOLUTE_PATH bundle -s $dir $GO_VERBOSE" || _fatal "Zest all failed"
		fi
	done

	# Run integration tests
	( $ABSOLUTE_PATH integrate $GO_VERBOSE && _info "Zest all completed succesfully" ) || ( $ABSOLUTE_PATH disintegrate $GO_VERBOSE; _fatal "Zest all failed" )
}

_zest_help() {
	_fatal "not implemented"
}

########################
# Main
########################

# Get master command
case $1 in
	build)
		COMMAND="build"
		;;
	bundle)
		COMMAND="bundle"
		;;
	test)
		COMMAND="test"
		;;
	create)
		COMMAND="create"
		;;
	version)
		COMMAND="version"
		;;
	help)
		COMMAND="help"
		;;
	enter)
		COMMAND="enter"
		;;
	init|init-service)
		COMMAND="init-service"
		;;
	init-project)
		COMMAND="init-project"
		;;
	integrate)
		COMMAND="integrate"
		;;
	disintegrate)
		COMMAND="disintegrate"
		;;
	run|up)
		COMMAND="run"
		;;
	stop|down)
		COMMAND="stop"
		;;
	push)
		COMMAND="push"
		;;
	all)
		COMMAND="all"
		;;
	*)
		COMMAND="unknown"
		;;
esac

# discard command
shift

# Usage if nessesary
if [[ "$COMMAND" == "help" ]]; then
	_zest_help
	exit 0
fi

if [[ "$COMMAND" == "unknown" ]]; then
	_zest_help
	exit 1
fi

# Globals
ABSOLUTE_PATH="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)/$(basename "${BASH_SOURCE[0]}")"
ABSOLUTE_DIR=$(cd `dirname "${BASH_SOURCE[0]}"` && pwd)

# Get other arguments
DEBUG=false
DEFAULT_VERSION=true
BUILD_ARGS=
DOCKER_VERBOSE=
GO_VERBOSE=
SERVICE_ARG=

while [[ $# -gt 0 ]]; do
	case $1 in
		-d|--debug|-v|--verbose)
			DEBUG=true
			DOCKER_VERBOSE="--verbose"
			GO_VERBOSE="-v"
			;;
		-nv|--no-default-version)
			DEFAULT_VERSION=false
			;;
		-b|--build-args)
			shift && BUILD_ARGS="$1"
			;;
		-s|--service|--service-path)
			shift && SERVICE_ARG="$1"
			;;

	esac
	shift
done

# Run main command
case $COMMAND in
	build)
		_zest_build
		;;
	bundle)
		_zest_bundle
		;;
	create)
		_zest_create
		;;
	test)
		_zest_test
		;;
	version)
		_zest_version
		;;
	enter)
		_zest_enter
		;;
	init-service)
		_zest_init_service
		;;
	init-project)
		_zest_init_project
		;;
	integrate)
		_zest_integrate
		;;
	disintegrate)
		_zest_integrate_down
		;;
	run)
		_zest_run
		;;
	stop)
		_zest_stop
		;;
	push)
		_zest_push
		;;
	all)
		_zest_all
		;;
esac

exit $?
