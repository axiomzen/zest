#!/bin/bash

# Log an error message
_error() {
	printf "\e[31;1m====> $@\e[0m\n"
}

# Log a fatal message and exit
_fatal() {
	printf "\e[31;1m====> $@\e[0m\n"
	exit 1
}

# Informational message
_info() {
	printf "\e[32;1m====> $@\e[0m\n"
}

# Verbose debugging message
_debug() {
	if $DEBUG; then
		printf "\e[33;1m====> $@\e[0m\n"
	fi
}

# find the _zester script
_zest_get_zester() {

	# First look for _zester in the pwd
	if [[ -x _zester ]]; then 
		ZESTER_PATH=$(pwd)/_zester
		return 0
	fi

	# Directory up
	if [[ -x ../_zester ]]; then
		ZESTER_PATH=$(pwd)/../_zester
		return 0
	fi

	# then look for it in the $PATH
	if which -s _zester; then
		ZESTER_PATH=$(which _zester)
		return 0
	fi

	# couldn't find it
	return 1
}

# Check we are a component
_zest_is_component() {

	# Components must have a Zestfile and a Dockerfile
	if [[ ! -r $1/Zestfile ]]; then
		return 1
	fi

	if [[ ! -r $1/Dockerfile ]]; then
		return 1
	fi

	return 0
}

# Check we are a project
_zest_is_project() {

	# Projects must have a docker-compose.yml
	if [[ ! -r $1/docker-compose.yml ]]; then
		return 1
	fi

	return 0
}

_zest_build() {

	# Get the component name (folder name)
	COMPONENT=$(basename `pwd`)
	_debug "Using component name $COMPONENT"

	# First ensure we're a component
	_debug "Checking component"
	if ! _zest_is_component . ; then
		_fatal "$COMPONENT is not a component"
	fi

	# load the Zestfile
	_debug "Loading Zestfile"
	source ./Zestfile

	# Must have $BUILD_CONTAINER set
	if [[ "$BUILD_CONTAINER" == "" ]]; then
		_fatal "BUILD_CONTAINER not set in Zestfile"
	fi

	# Get the zester script
	if ! _zest_get_zester; then
		_fatal "Could not find zester"
	fi
	_debug "Found _zester at $ZESTER_PATH"

	# Build in the container
	_info "Building component $COMPONENT in $BUILD_CONTAINER"
	docker run --rm -v $(pwd):/$COMPONENT -w /$COMPONENT -v $ZESTER_PATH:/usr/bin/zester $BUILD_CONTAINER zester build --name $COMPONENT

	if [[ $? -ne 0 ]]; then
		_fatal "Build failed"
	fi

	_info "Build success!"
}

_zest_bundle() {
	_fatal "not implemented"
}

_zest_test() {
	_fatal "not implemented"
}

_zest_version() {
	_fatal "not implemented"
}

_zest_help() {
	_fatal "not implemented"
}

########################
# Main
########################

# Get master command
case $1 in
	build)
		COMMAND="build"
		;;
	bundle)
		COMMAND="bundle"
		;;
	test)
		COMMAND="test"
		;;
	version)
		COMMAND="version"
		;;
	help)
		COMMAND="help"
		;;
	*)
		COMMAND="unknown"
		;;
esac

# discard command
shift

# Usage if nessesary
if [[ "$COMMAND" == "help" ]]; then
	_zest_help
	exit 0
fi

if [[ "$COMMAND" == "unknown" ]]; then
	_zest_help
	exit 1
fi

# Get other arguments
DEBUG=false

while [[ $# -gt 0 ]]; do
	case $1 in
		-d|--debug|-v|--verbose)
			DEBUG=true
			;;
	esac
	shift
done

# Run main command
case $COMMAND in
	build)
		_zest_build
		;;
	bundle)
		_zest_bundle
		;;
	test)
		_zest_test
		;;
	version)
		_info $(_zest_version)
		;;
esac

exit $?
