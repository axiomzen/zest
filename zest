#!/bin/bash

# Log an error message
_error() {
	printf "\e[31;1m====> $@\e[0m\n"
}

# Log a fatal message and exit
_fatal() {
	printf "\e[31;1m====> $@\e[0m\n"
	exit 1
}

# Informational message
_info() {
	printf "\e[32;1m====> $@\e[0m\n"
}

# Verbose debugging message
_debug() {
	if $DEBUG; then
		printf "\e[33;1m====> $@\e[0m\n"
	fi
}

# find the _zester script
_zest_get_zester() {

	# First look for _zester in the pwd
	if [[ -x _zester ]]; then
		ZESTER_PATH=$(pwd)/_zester
		return 0
	fi

	# Directory up
	if [[ -x ../_zester ]]; then
		ZESTER_PATH=$(pwd)/../_zester
		return 0
	fi

	# then look for it in the $PATH
	if which -s _zester; then
		ZESTER_PATH=$(which _zester)
		return 0
	fi

	# couldn't find it
	return 1
}

# Check we are a component
_zest_is_component() {

	# Components must have a Zestfile and a Dockerfile
	if [[ ! -r $1/Zestfile ]]; then
		return 1
	fi

	if [[ ! -r $1/Dockerfile ]]; then
		return 1
	fi

	return 0
}

# Check we are a project
_zest_is_project() {

	# Projects must have a docker-compose.yml and a Peelfile
	if [[ ! -r $1/docker-compose.yml ]]; then
		return 1
	fi

	if [[ ! -r $1/Peelfile ]]; then
		return 1
	fi

	return 0
}

_zest_run() {

	# Check project
	_debug "checking project"
	if ! _zest_is_project . ; then
		_fatal "Not a project"
	fi

	RUN_SERVICE=`grep -E -i "^run: [a-zA-Z\-]+$" Peelfile | grep -o -E "[a-zA-Z\-]+$"`

	if [[ "$RUN_SERVICE" == "" ]]; then
		_fatal "run: not specified in Peelfile"
	fi

	_info "Running service $RUN_SERVICE"

	docker-compose up -d $RUN_SERVICE
}

_zest_stop() {

	# Check project
	_debug "checking project"
	if ! _zest_is_project . ; then
		_fatal "Not a project"
	fi

	_info "Stopping project"

	docker-compose down
}

_zest_build() {

	# Get the component name (folder name)
	COMPONENT=$(basename `pwd`)
	_debug "Using component name $COMPONENT"

	# First ensure we're a component
	_debug "Checking component"
	if ! _zest_is_component . ; then
		_fatal "$COMPONENT is not a component"
	fi

	# load the Zestfile
	_debug "Loading Zestfile"
	source ./Zestfile

	# Must have $BUILD_CONTAINER set
	if [[ "$BUILD_CONTAINER" == "" ]]; then
		_fatal "BUILD_CONTAINER not set in Zestfile"
	fi

	# Get the zester script
	if ! _zest_get_zester; then
		_fatal "Could not find zester"
	fi
	_debug "Found _zester at $ZESTER_PATH"

	# Build in the container
	_info "Building component $COMPONENT in $BUILD_CONTAINER"
	docker run --rm -v $(pwd):$BUILD_MOUNT_DIR/$COMPONENT -w $BUILD_MOUNT_DIR/$COMPONENT -v $ZESTER_PATH:/usr/bin/zester $BUILD_CONTAINER zester build --name $COMPONENT

	if [[ $? -ne 0 ]]; then
		_fatal "Build failed"
	fi

	_info "Build success!"
}

_zest_bundle() {

	# Get the component name (folder name)
	COMPONENT=$(basename `pwd`)
	_debug "Using component name $COMPONENT"

	# First ensure we're a component
	_debug "Checking component"
	if ! _zest_is_component . ; then
		_fatal "$COMPONENT is not a component"
	fi

	# load the Zestfile
	_debug "Loading Zestfile"
	source ./Zestfile

	# Get the version tag override
	VERSION_OVERRIDE=$(Version)
	if [[ ! "$VERSION_OVERRIDE" == "" ]]; then
		VERSION=$VERSION_OVERRIDE
	fi

	# Check some version is set
	if [[ "$VERSION" == "" ]]; then
		_error "Version not set"
		_error "Using 'latest'"
		VERSION=latest
	fi

	# Get the project name
	if [[ "$REPO" == "" ]]; then
		REPO=$(cd ..; basename $PWD)
		_debug "REPO not set, using $REPO"
	fi

	# Build the image
	_info "Bundling image $REPO/$COMPONENT:$VERSION"

	if [[ "$IMAGE_SERVER" == "" ]]; then
		_debug "Not using image server"
		docker build -t $REPO/$COMPONENT:$VERSION -t $REPO/$COMPONENT:latest .
	else
		_debug "Using image server $IMAGE_SERVER"
		docker build -t $IMAGE_SERVER/$REPO/$COMPONENT:$VERSION -t $IMAGE_SERVER/$REPO/$COMPONENT:latest .
	fi

	if [[ $? -ne 0 ]]; then
		_fatal "Bundle failed"
	fi

	_info "Bundle success!"
}

_zest_test() {

	# Get the component name (folder name)
	COMPONENT=$(basename `pwd`)
	_debug "Using component name $COMPONENT"

	# First ensure we're a component
	_debug "Checking component"
	if ! _zest_is_component . ; then
		_fatal "$COMPONENT is not a component"
	fi

	# load the Zestfile
	_debug "Loading Zestfile"
	source ./Zestfile

	# Must have $TEST_CONTAINER or $BUILD_CONTAINER set
	if [[ "$TEST_CONTAINER" == "" ]]; then
		TEST_CONTAINER=$BUILD_CONTAINER
	fi
	if [[ "$TEST_CONTAINER" == "" ]]; then
		_fatal "Neither TEST_CONTAINER nor BUILD_CONTAINER set in Zestfile"
	fi

	# Get the zester script
	if ! _zest_get_zester; then
		_fatal "Could not find zester"
	fi
	_debug "Found _zester at $ZESTER_PATH"

	# Build in the container
	_info "Testing component $COMPONENT in $BUILD_CONTAINER"
	docker run --rm -v $(pwd):/$COMPONENT -w /$COMPONENT -v $ZESTER_PATH:/usr/bin/zester $BUILD_CONTAINER zester test --name $COMPONENT

	if [[ $? -ne 0 ]]; then
		_fatal "Build failed"
	fi

	_info "Build success!"
}

_zest_version() {

	# Get the component name (folder name)
	COMPONENT=$(basename `pwd`)
	_debug "Using component name $COMPONENT"

	# First ensure we're a component
	_debug "Checking component"
	if ! _zest_is_component . ; then
		_fatal "$COMPONENT is not a component"
	fi

	# load the Zestfile
	_debug "Loading Zestfile"
	source ./Zestfile

	# Get the version tag override
	VERSION_OVERRIDE=$(Version)
	if [[ ! "$VERSION_OVERRIDE" == "" ]]; then
		VERSION=$VERSION_OVERRIDE
	fi

	if [[ "$VERSION" == "" && $DEFAULT_VERSION == true ]]; then
		_debug "using default version"
		VERSION=0.0.0-unversioned
	fi

	echo "$VERSION"
}

_zest_init_service() {

	if [[ ! -f Zestfile ]]; then
		_info "Adding default Zestfile"
		cp /usr/local/share/zest/Zestfile.example Zestfile
	fi

	if [[ ! -f Dockerfile ]]; then
		_info "Creating empty Dockerfile"
		touch Dockerfile
	fi

	_info "$(basename $PWD) is now a component"

}

_zest_init_project() {

	if [[ ! -f docker-compose.yml ]]; then
		_info "Adding docker-compose"
		echo 'version: "2"' >> docker-compose.yml
		echo 'services:' >> docker-compose.yml

		#TODO search for each service?
	fi

	if [[ ! -f Peelfile ]]; then
		_info "Adding Peelfile"
		touch Peelfile
	fi
}

_zest_enter() {

	# Get the component name (folder name)
	COMPONENT=$(basename `pwd`)
	_debug "Using component name $COMPONENT"

	# First ensure we're a component
	_debug "Checking component"
	if ! _zest_is_component . ; then
		_fatal "$COMPONENT is not a component"
	fi

	# load the Zestfile
	_debug "Loading Zestfile"
	source ./Zestfile

	if [[ "$BUILD_CONTAINER" == "" ]]; then
		_fatal "BUILD_CONTAINER not set"
	fi

	_info "Entering $BUILD_CONTAINER for developemnt"
	docker run -v $(pwd):/$COMPONENT -w /$COMPONENT -ti $BUILD_CONTAINER bash -i

	_info "Leaving dev container"
}

_zest_integrate() {

	# Make sure we're a project
	if ! _zest_is_project . ; then
		_fatal "Not a project."
	fi

	# Get the integrate project
	_debug "Getting integrate service from Peelfile"
	INTEGRATE_SERVICE=`grep -E -i "^integrate: [a-zA-Z\-]+$" Peelfile | grep -o -E "[a-zA-Z\-]+$"`

	if [[ "$INTEGRATE_SERVICE" == "" ]]; then
		_fatal "integrate not speficied in Peelfile"
	fi

	# Run compose
	_debug "running compose"
	docker-compose up $INTEGRATE_SERVICE

	# Integrate finished
	# Capture return value
	INTEGRATE_EXIT_CODE=$?
	_debug "Compose exited with status $INTEGRATE_EXIT_CODE"

	# Clean up
	_debug "Cleaning up"
	docker-compose down

	if [[ -z $INTEGRATE_EXIT_CODE ]]; then
		_info "Integration tests passed"
	else
		_error "Integration tests failed"
		exit $INTEGRATE_EXIT_CODE
	fi
}

_zest_help() {
	_fatal "not implemented"
}

########################
# Main
########################

# Get master command
case $1 in
	build)
		COMMAND="build"
		;;
	bundle)
		COMMAND="bundle"
		;;
	test)
		COMMAND="test"
		;;
	version)
		COMMAND="version"
		;;
	help)
		COMMAND="help"
		;;
	enter)
		COMMAND="enter"
		;;
	init|init-service)
		COMMAND="init-service"
		;;
	init-project)
		COMMAND="init-project"
		;;
	integrate)
		COMMAND="integrate"
		;;
	run)
		COMMAND="run"
		;;
	stop)
		COMMAND="stop"
		;;
	*)
		COMMAND="unknown"
		;;
esac

# discard command
shift

# Usage if nessesary
if [[ "$COMMAND" == "help" ]]; then
	_zest_help
	exit 0
fi

if [[ "$COMMAND" == "unknown" ]]; then
	_zest_help
	exit 1
fi

# Get other arguments
DEBUG=false
DEFAULT_VERSION=true

while [[ $# -gt 0 ]]; do
	case $1 in
		-d|--debug|-v|--verbose)
			DEBUG=true
			;;
		-nv|--no-default-version)
			DEFAULT_VERSION=false
			;;
	esac
	shift
done

# Run main command
case $COMMAND in
	build)
		_zest_build
		;;
	bundle)
		_zest_bundle
		;;
	test)
		_zest_test
		;;
	version)
		_zest_version
		;;
	enter)
		_zest_enter
		;;
	init-service)
		_zest_init_service
		;;
	init-project)
		_zest_init_project
		;;
	integrate)
		_zest_integrate
		;;
	run)
		_zest_run
		;;
	stop)
		_zest_stop
		;;
esac

exit $?
